* What happens when you initialize a repository? Why do you need to do it?

A folder named .git is created that contains metadata about the files in the current folder. The metadata contains the revision history of the files that are being racked by git. This is perhaps to define the boundary of the repository, i.e. the current directory.

* How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is a list of files that would go into the next commit. Whereas the working directory is the folder where the files are stored on the hard drive and a repository is the git concept of a collection of files that are being tracked for version control. The staging area allows segregation of files based on whether or not they form a part of the 'logical change' that is being versioned through the next commit thus making it more meaningful.

* How can you use the staging area to make sure you have one commit per logical change?

By staging (and hence committing) only those files that contribute to the logical change rather than the entire directory.

* What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Whene there's a need to try out a new more efficient way of doing something that has already been implemented. Or when implementing an altogether new feature. Branches would allow us to retain the existing code-base for maybe further development or for implementation of other features by other people.

* How do the diagrams help you visualize the branch structure?

Well, they just do.

* What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A third commit is created after merging the files from the two branches. THe last checked out branch is now the tip of the merged branch. It is represented cause it has two parents, the two branches. A git log shows commits from both the branches in chronological order.

* What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Automatic will do when changes are unrelated are in different parts of the code. Automatic merging changes in the same part is likely to create conflicts. Hence manual merging is required in such cases.